component (Propagation = blocks) HeatPumpModel
%HeatPumpModel
% Heat pump for cooling and heating applications based on EN 14511 test 
% data. You must specify data for 6 test cases: A-2W55, A-2W65, A7W35, 
% A7W45, A35W18, and A35W7.
% <br/>
% <br/>
% <a href="matlab:open DocumentationHeatPumpBlock.html">Heat Pump Documentation</a>
% <br/>

% Copyright 2024 The MathWorks, Inc.

    nodes
        A = foundation.thermal_liquid.thermal_liquid; % A
        B = foundation.thermal_liquid.thermal_liquid; % B
    end

    inputs
        Fw = {0, 'kg/s'};
        Op = 0;
        Ep = 0;
        Ta = {0, 'K'};
    end

    outputs
        ePow = {0, 'kW'};
        COP = 0;
    end

    parameters
        modelOption = HeatPumpOptions.singleUnit; % Select heat pump option
        nomDevOption = NominalConditionDeviationModel.enabled; % Modify COP based on deviation from normal test conditions
        elecHeaterPower = {0, 'kW'};      % Additional electric heater rating
        heatingCapacityA = {10.17, 'kW'}; % A-2W55, estimated heating capacity during EN14511 test
        heatingCapacityB = {10.12, 'kW'}; % A-2W65, estimated heating capacity during EN14511 test
        heatingCapacityC = {10.17, 'kW'}; % A7W35, estimated heating capacity during EN14511 test
        heatingCapacityD = {10.12, 'kW'}; % A7W45, estimated heating capacity during EN14511 test
        coolingCapacityE = {10.55, 'kW'}; % A35W18, estimated cooling capacity during EN14511 test
        coolingCapacityF = {6.9, 'kW'};   % A35W7, estimated cooling capacity during EN14511 test
        heatingCoPA = 4.86;               % A-2W55, estimated COP (or SCOP) during EN14511 test
        heatingCoPB = 3.7;                % A-2W65, estimated COP (or SCOP) during EN14511 test
        heatingCoPC = 4.86;               % A7W35, estimated COP (or SCOP) during EN14511 test
        heatingCoPD = 3.7;                % A7W45, estimated COP (or SCOP) during EN14511 test
        coolingCoPE = 4.13;               % A35W18, estimated COP (or SCOP) during EN14511 test
        coolingCoPF = 2.7;                % A35W7, estimated COP (or SCOP) during EN14511 test
        coilDia = {.005, 'm'};            % Diameter of coil pipe
        initialT = {293, 'K'};            % Initial temperature of water in the coils
        initialP = {.101325, 'MPa'};      % Initial pressure of water in the coils
        coilArea = {1.96e-05, 'm^2'};     % Area of coil pipe
        coilLen = {.1, 'm'};              % Length of coil pipe
        minWaterFlowRate = {.001, 'kg/s'};% Minimum water flowrate
        measTimelag = {60, 's'};          % Temperature measurement time delay for water flow
        nominalFlow = {0.5, 'kg/s'};      % Nominal flow as measured
        numHeatPumps = 5;                 % Number of heat pumps
        expansionVol = {5, 'm^3'};        % Internal tank volume for condensation/evaporation
        waterOpTempMin = {278, 'K'};      % Minimum operational water temperature
        waterOpTempMax = {330, 'K'};      % Maximum operational water temperature
        % opRangeHeatUpp = {308, 'K'};      % Operational air temperature upper range during heating
        % opRangeHeatLow = {245, 'K'};      % Operational air temperature lower range during heating
        % opRangeCoolUpp = {316, 'K'};      % Operational air temperature upper range during cooling
        % opRangeCoolLow = {283, 'K'};      % Operational air temperature lower range during cooling
    end

    if modelOption == HeatPumpOptions.singleUnit
        annotations
            numHeatPumps : ExternalAccess=none;
        end
        parameters(ExternalAccess=none)
            totalNumDevices = 1;
        end
    else
        parameters(ExternalAccess=none)
            totalNumDevices = numHeatPumps;
        end
    end

    annotations
        Op   : Side=Left;
        Ep   : Side=Left;
        Ta   : Side=Left;
        Fw   : Side=Left;
        A    : Side=Right;
        B    : Side=Right;
        ePow : Side=Bottom;
        COP  : Side=Bottom;
        UILayout = [UIGroup("EN14511 Test Data",heatingCapacityA,heatingCoPA,...
                                        heatingCapacityB,heatingCoPB,...
                                        heatingCapacityC,heatingCoPC,...
                                        heatingCapacityD,heatingCoPD,...
                                        coolingCapacityE,coolingCoPE,...
                                        coolingCapacityF,coolingCoPF) ...
                    UIGroup("Heat Pump",elecHeaterPower,coilLen,coilDia,coilArea,...
                                        initialT,initialP,expansionVol,nomDevOption) ...
                    UIGroup("Operational Limits",modelOption,numHeatPumps,nominalFlow,...
                                        minWaterFlowRate,measTimelag,...
                                        waterOpTempMin,waterOpTempMax)];
    end

    parameters(ExternalAccess=none)
        backupElecHeaterWatts = {value(elecHeaterPower,'W'), 'W'};
        capacityVector = {[value(heatingCapacityA,'W'), value(heatingCapacityB,'W'), ...
            value(heatingCapacityC,'W'), value(heatingCapacityD,'W'), ...
            value(coolingCapacityE,'W'), value(coolingCapacityF,'W')], 'W'};
        waterSpHeat = {[4183 4187 4180 4180 4180 4195], 'J/kg/K'}
        nominalDeltaTw = sum(capacityVector./(waterSpHeat*nominalFlow))/length(waterSpHeat)
    end

    components(ExternalAccess=observe)
        heatPumpDevice = AirWaterHeatPump(elecHeaterPower = backupElecHeaterWatts, ...
            heatingCapacityA = heatingCapacityA, heatingCapacityB = heatingCapacityB, ...
            heatingCapacityC = heatingCapacityC, heatingCapacityD = heatingCapacityD, ...
            coolingCapacityE = coolingCapacityE, coolingCapacityF = coolingCapacityF, ...
            heatingCoPA = heatingCoPA, heatingCoPB = heatingCoPB, ...
            heatingCoPC = heatingCoPC, heatingCoPD = heatingCoPD, ...
            coolingCoPE = coolingCoPE, coolingCoPF = coolingCoPF, ...
            waterOpTempMin = waterOpTempMin, ...
            waterOpTempMax = waterOpTempMax, ...
            measTimelagWaterInlet = measTimelag, ...
            measInitialWaterInletT = initialT, ...
            coilDia = sqrt(totalNumDevices)*coilDia, ...
            coilWaterT = initialT, coilWaterP = initialP, ...
            coilArea = totalNumDevices*coilArea, coilLen = coilLen, ...
            minWaterFlowRate = minWaterFlowRate, measTimelag = measTimelag, ...
            measInitialWaterOutletT = initialT, waterPumpArea = totalNumDevices*coilArea, ...
            tankVolume = expansionVol, tankInitialT = initialT);
    end
        
    equations
        heatPumpDevice.Fw == totalNumDevices*Fw;
        heatPumpDevice.COP == COP;
        heatPumpDevice.ePow == totalNumDevices*ePow;
    end

    connections
        connect(Op,heatPumpDevice.Op);
        connect(Ta,heatPumpDevice.Ta);
        connect(Ep,heatPumpDevice.Ep);
        connect(A,heatPumpDevice.A);
        connect(B,heatPumpDevice.B);
    end

    if nomDevOption == NominalConditionDeviationModel.enabled
        equations
            heatPumpDevice.Nd == max({1,'1'},abs(heatPumpDevice.A.T-heatPumpDevice.B.T)/nominalDeltaTw);
        end
    else
        equations
            heatPumpDevice.Nd == {1,'1'};
        end
    end

end
component (Propagation = blocks) EnvModel
%EnvModel
% Ambient temperature model
% <br/>
% <br/>
% <a href="matlab:open DocumentationCustomBlockAmbient.html">Ambient Model Documentation</a>
% <br/>

% Copyright 2024 The MathWorks, Inc.

    nodes
        A = foundation.thermal.thermal; % H
    end
    
    variables (Access=private)
        Q = {0, 'W'}; % Heat flow rate
    end
    
    branches
        Q : A.Q -> *;
    end
    
    parameters
        listOfDays = 1:10;                   % List of days
        sunrise = {ones(1,10),'s'};          % Sunrise time vector
        sunset = {ones(1,10),'s'};           % Sunset time vector
        startTime = {0,'s'};                 % Start time for simulation
        avgDayTvec = {300*ones(1,10),'K'};   % Average day temperature vector
        pcDayTvar = 5;                       % Percent variation in day temperature
        avgNightTvec = {300*ones(1,10),'K'}; % Average night temperature vector
        pcNightTvar = 5;                     % Percent variation in night temperature
        cloudData = cloudCoverOptions.daily; % Cloud cover data option
        cloudCoverVal = zeros(1,10);         % Cloud cover value
    end

    % Error Checks
    equations
        assert(length(listOfDays)==length(sunrise));
        assert(length(listOfDays)==length(sunset));
        assert(length(listOfDays)==length(avgDayTvec));
        assert(length(listOfDays)==length(avgNightTvec));
    end

    if cloudData == cloudCoverOptions.daily
        equations
            assert(length(listOfDays)==length(cloudCoverVal))
        end
    else % cloudCoverOptions.hourly
        equations
            assert(24*length(listOfDays)==length(cloudCoverVal))
        end
    end

    parameters(Access=private)
        [t,Tamb] = get24HrTemperatureProfile( ... 
            value(avgDayTvec,'K'),pcDayTvar/100, ...
            value(avgNightTvec,'K'),pcNightTvar/100, ...
            value(sunrise,'s'),value(sunset,'s'));
        cloudCoverTime = 1:length(cloudCoverHourly);
    end

    if cloudData == cloudCoverOptions.daily
        parameters(Access=private)
            cloudCoverHourly = repelem(cloudCoverVal,24);
        end
    else
        parameters(Access=private)
            cloudCoverHourly = cloudCoverVal;
        end
    end

    outputs
        cloud = {0,'1'}; % C
    end

    annotations
        A : Side=Right; % H
        UILayout = [UIGroup("Simulation Timeframe",listOfDays,sunrise,sunset,startTime) ...
                    UIGroup("Temperature Model",avgDayTvec,pcDayTvar,avgNightTvec,pcNightTvar)...
                    UIGroup("Cloud Cover Model",cloudData,cloudCoverVal)];
    end
    
    intermediates
        currentTime = value(time + startTime,'s');
    end

    equations
        A.T == {tablelookup(t,Tamb,currentTime,interpolation=linear,extrapolation=nearest),'K'};
        cloud == {tablelookup(cloudCoverTime,cloudCoverHourly,floor(currentTime/3600),interpolation=linear,extrapolation=nearest),'1'};
    end
end
   
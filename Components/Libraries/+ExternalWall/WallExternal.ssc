component (Propagation = blocks) WallExternal
    % Wall External:2.5
    % This block is used to specify a solid external wall with solar Load. 
    % This block combines Wall Selector block and the Solar Radiation on 
    % Surface block to model external walls with solar radiation.
    % <br/>
    % <br/>
    % <a href="matlab:open DocumentationExternalWall.html">Documentation for External Wall</a>
    % <br/>

    % Copyright 2025 The MathWorks, Inc.

    annotations
        A : Side=Left;
        B : Side=Right;
        R : Side=Left;
        UILayout = [UIGroup("Wall", extWallModel, wallLength, wallHeight, wallThickness, ...
                            wallMaterialDen, wallMaterialCp, wallAbsorptivity, wallThermalK)
                    UIGroup("Window", winLength, winHeight, winThickness, ...
                            winMaterialDen, winMaterialCp, winAbsorptivity, ...
                            winThermalK, winTransmissivity)
                    UIGroup("Vent", ventLength, ventHeight)
                    UIGroup("Heat Transfer", extToWallHTC, intToRoomHTC, iniT)
                    UIGroup("Location", latitude, longitude, localTime, dayLightS) 
                    UIGroup("Surface Orientation", surfAngle, surfUnitV) 
                    UIGroup("Solar Data Parameterization", startYear, startMonth, startDay, startHr, numHrsData, interp_method,extrap_method)];
    end

    inputs
        R = {0, 'W/m^2'}; % Rad
    end
  
    nodes
        A = foundation.thermal.thermal; % A
        B = foundation.thermal.thermal; % B
    end

    parameters
        extWallModel = wallExternalModelOption.wallSolarWinVent; % Select wall type
        % Wall properties
        wallLength = {5, "m"};                      % Wall length
        wallHeight = {3, "m"};                      % Wall height
        wallThickness = {0.3, "m"};                 % Wall thickness
        wallMaterialDen = {4000, "kg/m^3"};         % Wall material density
        wallMaterialCp = {1870, "J/(K*kg)"};        % Wall material heat capacity
        wallAbsorptivity = 0.5;                     % Wall absorptivity
        wallThermalK = {2, "W/(K*m)"};              % Wall thermal conductivity
        % Vent properties
        ventLength = {0.1, "m"};                    % Vent length
        ventHeight = {0.1, "m"};                    % Vent height
        % Window properties
        winLength = {1, "m"};                       % Window length
        winHeight = {0.5, "m"};                     % Window height
        winThickness = {0.007, "m"};                % Window glass thickness
        winMaterialDen = {2500, "kg/m^3"};          % Window glass material density
        winMaterialCp = {787, "J/(K*kg)"};          % Window glass material heat capacity
        winAbsorptivity = 0.35;                     % Window glass Absorptivity
        winThermalK = {1, "W/(K*m)"};               % Window glass thermal conductivity
        winTransmissivity = 0.45;                   % Window glass transmissivity
        extToWallHTC = {5, "W/(K*m^2)"};            % Effective heat transfer coefficient from ambient to wall surface
        intToRoomHTC = {5, "W/(K*m^2)"};            % Effective heat transfer coefficient from internal surface to the room
        iniT = {300, "K"};                          % Initial temperature
        % Solar Model
        startYear = {2025, "1"};                    % Year for start time
        startMonth = {1, "1"};                      % Month for start time
        startDay = {1, "1"};                        % Day for start time
        startHr = {1,"1"};                          % Hour of the day for start time
        numHrsData = {24, "1"};                     % Number of hours of solar data
        latitude = {5, "1"};                        % Latitude of the location
        longitude = {5, "1"};                       % Longitude of the location
        localTime = {5, "1"};                       % Longitude reference for local time calculations
        surfAngle = {90, "deg"};                    % Surface angle wrt ground
        surfUnitV = {[0,-1], "1"};                  % Unit outward normal direction vector
        dayLightS = {0, "1"};                       % Daylight hour savings
        interp_method = simscape.enum.interpolation.linear; % Interpolation method
        extrap_method = simscape.enum.extrapolation.nearest; % Extrapolation method
    end
  
    components(ExternalAccess = observe)
        WallOrientation = SolarRadiationOnSurface.solarRadiationOnSurface(...
                          dayLightS = dayLightS, ...
                          extrap_method = extrap_method, ...
                          interp_method = interp_method, ...
                          latitude = latitude, ...
                          localTime = localTime, ...
                          longitude = longitude, ...
                          numHrsData = numHrsData, ...
                          startDay = startDay, ...
                          startHr = startHr, ...
                          startMonth = startMonth, ...
                          startYear = startYear, ...
                          surfAngle = surfAngle, ...
                          surfUnitV = surfUnitV);
    end
    
    connections
        connect(WallOrientation.Sf,WallModel.S);
        connect(R,WallOrientation.S);
        connect(B,WallModel.B);
        connect(A,WallModel.A);
    end

    if extWallModel == wallExternalModelOption.wallSolar
        annotations
            Icon = "extWallSolar.png";
            [winLength,winHeight,ventLength,ventHeight,winMaterialDen,winMaterialCp,winAbsorptivity,...
                winThermalK,winThickness,winTransmissivity] : ExternalAccess=none;
        end
        components(ExternalAccess=observe)
            WallModel = WallSelector.wallSelector(...
                extToWallHTC = extToWallHTC, ...
                iniT = iniT, ...
                intToRoomHTC = intToRoomHTC, ...
                optWall = int32(3), ...
                wallAbsorptivity = wallAbsorptivity, ...
                wallHeight = wallHeight, ...
                wallLength = wallLength, ...
                wallMaterialCp = wallMaterialCp, ...
                wallMaterialDen = wallMaterialDen, ...
                wallThermalK = wallThermalK, ...
                wallThickness = wallThickness);
        end
    elseif extWallModel == wallExternalModelOption.wallSolarWin
        annotations
            Icon = "extWallSolarWin.png";
            [ventLength,ventHeight] : ExternalAccess=none;
        end
        components(ExternalAccess=observe)
            WallModel = WallSelector.wallSelector(...
                extToWallHTC = extToWallHTC, ...
                iniT = iniT, ...
                intToRoomHTC = intToRoomHTC, ...
                optWall = int32(4), ...
                wallAbsorptivity = wallAbsorptivity, ...
                wallHeight = wallHeight, ...
                wallLength = wallLength, ...
                wallMaterialCp = wallMaterialCp, ...
                wallMaterialDen = wallMaterialDen, ...
                wallThermalK = wallThermalK, ...
                wallThickness = wallThickness, ...
                winLength = winLength, ...
                winHeight = winHeight, ...
                winThickness = winThickness, ...
                winMaterialDen = winMaterialDen, ...
                winMaterialCp = winMaterialCp, ...
                winAbsorptivity = winAbsorptivity, ...
                winThermalK = winThermalK, ...
                winTransmissivity = winTransmissivity);
        end
    elseif extWallModel == wallExternalModelOption.wallSolarVent
        annotations
            Icon = "extWallSolarVent.png";
            [winLength,winHeight,winMaterialDen,winMaterialCp,winAbsorptivity,winThermalK,...
                winThickness,winTransmissivity] : ExternalAccess=none;
        end
        components(ExternalAccess=observe)
            WallModel = WallSelector.wallSelector(...
                extToWallHTC = extToWallHTC, ...
                iniT = iniT, ...
                intToRoomHTC = intToRoomHTC, ...
                optWall = int32(6), ...
                wallAbsorptivity = wallAbsorptivity, ...
                wallHeight = wallHeight, ...
                wallLength = wallLength, ...
                wallMaterialCp = wallMaterialCp, ...
                wallMaterialDen = wallMaterialDen, ...
                wallThermalK = wallThermalK, ...
                wallThickness = wallThickness, ...
                ventLength = ventLength, ...
                ventHeight = ventHeight);
        end
    else % extWallModel == wallExternalModelOption.wallSolarWinVent
        annotations
            Icon = "extWallSolarWinVent.png";
        end
        components(ExternalAccess=observe)
            WallModel = WallSelector.wallSelector(...
                extToWallHTC = extToWallHTC, ...
                iniT = iniT, ...
                intToRoomHTC = intToRoomHTC, ...
                optWall = int32(5), ...
                wallAbsorptivity = wallAbsorptivity, ...
                wallHeight = wallHeight, ...
                wallLength = wallLength, ...
                wallMaterialCp = wallMaterialCp, ...
                wallMaterialDen = wallMaterialDen, ...
                wallThermalK = wallThermalK, ...
                wallThickness = wallThickness, ...
                ventLength = ventLength, ...
                ventHeight = ventHeight, ...
                winLength = winLength, ...
                winHeight = winHeight, ...
                winThickness = winThickness, ...
                winMaterialDen = winMaterialDen, ...
                winMaterialCp = winMaterialCp, ...
                winAbsorptivity = winAbsorptivity, ...
                winThermalK = winThermalK, ...
                winTransmissivity = winTransmissivity);
        end
    end
end

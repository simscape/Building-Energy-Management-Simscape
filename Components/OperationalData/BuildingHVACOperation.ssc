component (Propagation = blocks) BuildingHVACOperation
%BuildingHVACOperation
% Building Model integrator with Heat Pumps
% <br/>
% <br/>
% <a href="matlab:open DocumentationBuildingOperation.html">Operational Data Documentation</a>
% <br/>

% Copyright 2024 The MathWorks, Inc.

    nodes
        HPA = foundation.thermal_liquid.thermal_liquid; % A
        HPB = foundation.thermal_liquid.thermal_liquid; % B
    end

    for i = 1:nApts
        for j = 1:nRooms
            nodes
                BldgA(i,j) = foundation.thermal_liquid.thermal_liquid; % Li
                BldgB(i,j) = foundation.thermal_liquid.thermal_liquid; % Lo
            end
        end
    end

    parameters
        heatPerOccupant = {5, 'W'}; % Heat per occupant
        opsParamBldg = zeros(400,7);% Building operational parameter matrix
        % Row size 400 represents: 
        %    Length of time stamps (num of hrs) x num of rooms.
        % Column size 9 represents:
        % 1. Level  
        % 2. Apartment Num  
        % 3. Room Num
        % 4. HVAC On  
        % 5. Heat Source (W)  
        % 6. Electrical Load (W)  
        % 7. Room Occupancy
    end

    parameters(ExternalAccess=none)
        nApts = max(1,max(max(opsParamBldg(:,2))));
        nRooms = max(1,max(max(opsParamBldg(:,3))));
        totalNumRooms = nApts*nRooms;
        maxHours = max(1,round(size(opsParamBldg,1)/totalNumRooms));
    end

    outputs
        Vg = {ones(nApts,nRooms), '1'};  % V
        Qr = {zeros(nApts,nRooms), 'W'}; % S
    end

    for i = 1:nApts
        for j = 1:nRooms
            connections
                connect(HPA,BldgA(i,j));
                connect(HPB,BldgB(i,j));
            end
        end
    end

    annotations
        HPA   : Side=Left;
        HPB   : Side=Left;
        Vg    : Side=Top;
        Qr    : Side=Top;
        BldgA : Side=Right;
        BldgB : Side=Right;
        UILayout = [UIGroup("Operational Data",opsParamBldg) ... 
                    UIGroup("Other Variables",heatPerOccupant)];
    end

    % Add user defined table params to the room model
    for i = 1:nApts
        for j = 1:nRooms
            % ID or row number in opsParamBldg = (min(maxHours,max(1,ceil(value(time,'s')/3600)))-1)*totalNumRooms+room_num
            % totalNumRooms = nApts*nRooms; room_num = (i-1)*nRooms+j
            equations
                % Calculate occupancy rate and heat generation per room
                Qr(i,j) == heatPerOccupant*{opsParamBldg((min(maxHours,max(1,ceil(value(time,'s')/3600)))-1)*(nApts*nRooms)+((i-1)*nRooms+j),7),'1'} + ...
                           {opsParamBldg((min(maxHours,max(1,ceil(value(time,'s')/3600)))-1)*(nApts*nRooms)+((i-1)*nRooms+j),5),'W'} + ...
                           {opsParamBldg((min(maxHours,max(1,ceil(value(time,'s')/3600)))-1)*totalNumRooms+i,6),'W'};
            end
        end
    end

    for i = 1:nApts
        for j = 1:nRooms
            equations
                % Open or close gate valves to each room, based on selection
                Vg(i,j) == {opsParamBldg((min(maxHours,max(1,ceil(value(time,'s')/3600)))-1)*totalNumRooms+i,4),'1'}; % column 4 of opsParamBldg stores HVAC On/Off data
            end
        end
    end

end
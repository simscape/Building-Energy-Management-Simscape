component (Propagation = blocks) BuildingModel
%BuildingModel
% This custom component defines a 3D building with multiple rooms, their 
% interconnection information, and option for cooling/heating the rooms.
% <br/>
% <br/>
% <a href="matlab:open DocumentationCustomBlockBuilding.html">Building Model Documentation</a>
% <br/>

% Copyright 2024 The MathWorks, Inc.

    nodes
        H = foundation.thermal.thermal; % H
        G = foundation.thermal.thermal; % G
    end

    for i = 1:nApts
        for j = 1:nRooms
            nodes
                A(i,j) = foundation.thermal_liquid.thermal_liquid; % Li
                B(i,j) = foundation.thermal_liquid.thermal_liquid; % Lo
            end
        end
    end

    inputs
        C = {0 ,'1'}; % C
        V = {ones(nApts,nRooms), '1'}; % V
        S = {zeros(nApts,nRooms) ,'W'};% S
    end

    outputs
        roomTemp = {zeros(nApts,nRooms),'K'};       % Tr
        wallTemp = {zeros(1,numOfRoomExtConn),'K'}; % Tw
    end

    parameters
        roomModelOption = roomPhysicsOptions.basicroom; % Select room modelling option
        extToWallHTC = {5, 'W/(K*m^2)'};                % Effective heat transfer coefficient from ambient to wall surface
        wallMaterialDen = {2400, 'kg/m^3'};             % Wall material density
        wallMaterialCp = {750, 'J/(K*kg)'};             % Wall material heat capacity
        wallAbsorptivity = 0.6;                         % Wall absorptivity
        intToRoomHTC = {5, 'W/(K*m^2)'};                % Effective heat transfer coefficient from internal surface to the room
        wallThermalK = {2, 'W/(K*m)'};                  % Wall thermal conductivity
        wallThickness = {.3, 'm'};                      % Wall thickness
        winMaterialDen = {4000, 'kg/m^3'};              % Window material density
        winMaterialCp = {840, 'J/(K*kg)'};              % Window material heat capacity
        winAbsorptivity = .4;                           % Window Absorptivity
        winThermalK = {1, 'W/(K*m)'};                   % Window thermal conductivity
        winThickness = {.01, 'm'};                      % Window thickness
        winTransmissivity = .2;                         % Window transmissivity
        nApts = 5;                                      % Number of apartments
        nRooms = 8;                                     % Number of rooms
        roomVolMat = {ones(5,8),'m^3'};                 % Room volume matrix
        roomRadiatorArea = {ones(5,8),'m^2'};           % Room radiator projection area matrix
        roomUFPipingArea = {ones(5,8),'m^2'};           % Room under floor piping area matrix
        % Columns: 1:2=apt/room1, 3:4=apt/room2, 5=overlap-area
        roomConnMat = ones(25,5);                       % Room connectivity matrix
        % Columns: 1:3=apt/room/wall, 4:6=wall/window/vent
        roomEnvConnMat = ones(20,6);                    % Wall to ambient contact area matrix
        % rows=same as roomEnvConnMat, Columns=hourList
        roomEnvSolarRad = ones(20,100);                 % Wall hourly-solar-radiation matrix
        % 1-3 = apartment num, room num, roof area
        roofEnvConnMat = ones(10,3);                    % Roof to ambient contact area matrix
        % rows == same as roofEnvConnMat; Column=hourList
        roofEnvSolarRad = ones(10,100);                 % Roof hourly-solar-radiation matrix
        % 1-3 = apartment num, room num, floor area
        floorGroundConn = ones(10,3);                   % Ground floor room thermal connectivity
        iniTemperature = {300, 'K'};                    % Initial temperature
        radiatorPipeGap = {1e-2, 'm'};                  % Radiator pipe gap in layout
        radiatorPipeHydrDia = {5e-3, 'm'};              % Radiator pipe hydraulic diameter
        radiatorPipeArea = {2e-5, 'm^2'};               % Radiator pipe cross-sectional area
        heatTransferPipeRoughness = {1e-06, 'm'};       % Cooling / heating pipe roughness
        UFPipeHydrDia = {5e-3, 'm'};                    % Under floor pipe hydraulic diameter
        UFPipeGap = {1e-1, 'm'};                        % Under floor pipe gap in layout
        UFPipeArea = {2e-5, 'm^2'};                     % Under floor pipe cross-sectional area
    end

    parameters(ExternalAccess=observe)
        radiatorPipeLen = roomRadiatorArea./(radiatorPipeGap+radiatorPipeHydrDia);
        UFPipeLen = roomUFPipingArea./(UFPipeGap+UFPipeHydrDia);
        airDensity = {1.28, 'kg/m^3'};
        airCp = {700, 'J/(kg*K)'};
        numOfRoomConn = size(roomConnMat,1);
        intWallAreaVec = {roomConnMat(:,5),'m^2'};
        numOfRoomExtConn = size(roomEnvConnMat,1);
        numOfRoomWithRoof = size(roofEnvConnMat,1);
        numOfRoomGroundFlr = size(floorGroundConn,1);
        solidWallArea = {roomEnvConnMat(:,4),'m^2'};
        glassWindowArea = {roomEnvConnMat(:,5),'m^2'};
        openVentArea = {roomEnvConnMat(:,6),'m^2'};
        roofArea = {roofEnvConnMat(:,3),'m^2'};
        floorArea = {floorGroundConn(:,3),'m^2'}
        minArea = {1e-10,'m^2'};
        maxHours = size(roomEnvSolarRad,2);
    end

    annotations
        S : Side=Left;
        C : Side=Left;
        H : Side=Left;
        G : Side=Bottom;
        A : Side=Left;
        B : Side=Right;

        UILayout = [UIGroup("Building Physics",nApts,nRooms,roomVolMat,roomConnMat,roomEnvConnMat,roomEnvSolarRad,floorGroundConn,roomModelOption,roomRadiatorArea,roomUFPipingArea) ...
                    UIGroup("Room Physics",radiatorPipeGap,radiatorPipeHydrDia,radiatorPipeArea,UFPipeGap,UFPipeHydrDia,UFPipeArea) ...
                    UIGroup("Wall Properties",wallAbsorptivity,wallThickness,wallMaterialDen,wallMaterialCp,wallThermalK) ...
                    UIGroup("Window Glass Properties",winAbsorptivity,winTransmissivity,winThickness,winMaterialDen,winMaterialCp,winThermalK)...
                    UIGroup("Heat Transfer",heatTransferPipeRoughness,extToWallHTC,intToRoomHTC,iniTemperature)];
    end
    
    % Define rooms for all the apartments
    for i = 1:nApts
        for j = 1:nRooms
            components(ExternalAccess=observe)
                Room(i,j) = foundation.thermal.elements.mass(mass_type = int32(1), num_ports = int32(1), ...
                   mass = roomVolMat(i,j)*airDensity, sp_heat = airCp, ...
                   T = {value = iniTemperature, priority = priority.high});
            end
        end
    end

    if roomModelOption == roomPhysicsOptions.basicroom
        for i = 1:nApts
            for j = 1:nRooms
                % Closing TL domain nodes as they are not needed; put dummy param. values
                equations
                    roomTemp(i,j) == Room(i,j).T;
                    A(i,j).T == {300, 'K'};
                    A(i,j).p == {0.1, 'MPa'};
                    B(i,j).T == {300, 'K'};
                    B(i,j).p == {0.1, 'MPa'};
                end
            end
        end
        annotations
            [roomRadiatorArea,roomUFPipingArea,radiatorPipeGap,radiatorPipeHydrDia,...
                radiatorPipeArea,heatTransferPipeRoughness,...
                UFPipeHydrDia,UFPipeGap,UFPipeArea,...
                A,B,V]: ExternalAccess=none;
        end
    elseif roomModelOption == roomPhysicsOptions.requirements
        for i = 1:nApts
            for j = 1:nRooms
                components(ExternalAccess=observe)
                    Tref(i,j) = foundation.thermal.elements.reference;
                    AddHeat(i,j) = foundation.thermal.sources.controlled_heat_flow;
                end
                % Closing TL domain nodes as they are not needed; put dummy param. values
                equations
                    roomTemp(i,j) == Room(i,j).T;
                    A(i,j).T == {300, 'K'};
                    A(i,j).p == {0.1, 'MPa'};
                    B(i,j).T == {300, 'K'};
                    B(i,j).p == {0.1, 'MPa'};
                end
                connections
                    connect(S(i,j),AddHeat(i,j).S);
                    connect(AddHeat(i,j).B,Room(i,j).M);
                    connect(AddHeat(i,j).A,Tref(i,j).H);
                end
            end
        end
        annotations
            [roomRadiatorArea,roomUFPipingArea,radiatorPipeGap,radiatorPipeHydrDia,...
                radiatorPipeArea,heatTransferPipeRoughness,...
                UFPipeHydrDia,UFPipeGap,UFPipeArea,...
                A,B,V]: ExternalAccess=none;
        end
    elseif roomModelOption == roomPhysicsOptions.roomRadiatorUF
        for i = 1:nApts
            for j = 1:nRooms
                components(ExternalAccess=observe)
                    Tref(i,j) = foundation.thermal.elements.reference;
                    AddHeat(i,j) = foundation.thermal.sources.controlled_heat_flow;
                end
                components(ExternalAccess=observe,CompileReuse=true)
                    RoomRadiator(i,j) = RoomRadiatorPiping(...
                        radiatorConvArea=pi*radiatorPipeHydrDia*radiatorPipeLen(i,j),...
                        radiatorConvHTC=intToRoomHTC, ...
                        gateValveOrificeDia=radiatorPipeHydrDia,...
                        maxGateValveOrificeDia=radiatorPipeHydrDia, ...
                        radiatorPipeHydrDia=radiatorPipeHydrDia,...
                        radiatorPipeT=iniTemperature, ...
                        radiatorPipeArea=radiatorPipeArea,...
                        radiatorPipeLen=radiatorPipeLen(i,j), ...
                        radiatorPipeRoughness=heatTransferPipeRoughness,...
                        gateValveBypassOrificeDia=radiatorPipeHydrDia,...
                        maxGateValveBypassOrificeDia=radiatorPipeHydrDia, ...
                        radiatorBypassPipeHydrDia=radiatorPipeHydrDia,...
                        radiatorBypassPipeT=iniTemperature, ...
                        radiatorBypassPipeArea=radiatorPipeArea,...
                        radiatorBypassPipeLen=radiatorPipeLen(i,j), ...
                        radiatorBypassPipeRoughness=heatTransferPipeRoughness);
                    RoomUF(i,j) = RoomUnderFloorPiping(...
                        UFPipeHTArea =pi*UFPipeHydrDia*UFPipeLen(i,j), ...
                        UFPipeHTC=intToRoomHTC,...
                        gateValveOrificeDia=UFPipeHydrDia, ...
                        gateValveBypassOrificeDia=UFPipeHydrDia, ...
                        maxGateValveOrificeDia=UFPipeHydrDia,...
                        maxGateValveBypassOrificeDia=UFPipeHydrDia,...
                        UFPipeHydrDia=UFPipeHydrDia, ...
                        UFBypassPipeHydrDia=UFPipeHydrDia, ...
                        UFPipeT=iniTemperature,...
                        UFBypassPipeT=iniTemperature,...
                        UFPipeArea=UFPipeArea, ...
                        UFBypassPipeArea=UFPipeArea, ...
                        UFPipeLen=UFPipeLen(i,j),...
                        UFBypassPipeLen=UFPipeLen(i,j),...
                        UFPipeRoughness=heatTransferPipeRoughness, ...
                        UFBypassPipeRoughness=heatTransferPipeRoughness);
                end
                equations
                    roomTemp(i,j) == Room(i,j).T;
                    RoomRadiator(i,j).TL_V == V(i,j);
                    RoomUF(i,j).TL_V == V(i,j);
                end
                connections
                    connect(RoomRadiator(i,j).TL_A,A(i,j));
                    connect(RoomRadiator(i,j).TL_B,B(i,j));
                    connect(RoomUF(i,j).TL_A,A(i,j));
                    connect(RoomUF(i,j).TL_B,B(i,j));
                    connect(RoomRadiator(i,j).M,Room(i,j).M);
                    connect(RoomUF(i,j).M,Room(i,j).M);
                    connect(S(i,j),AddHeat(i,j).S);
                    connect(AddHeat(i,j).B,Room(i,j).M);
                    connect(AddHeat(i,j).A,Tref(i,j).H);
                end
            end
        end
    elseif roomModelOption == roomPhysicsOptions.roomRadiator
        for i = 1:nApts
            for j = 1:nRooms
                components(ExternalAccess=observe)
                    Tref(i,j) = foundation.thermal.elements.reference;
                    AddHeat(i,j) = foundation.thermal.sources.controlled_heat_flow;
                end
                components(ExternalAccess=observe,CompileReuse=true)
                    RoomRadiator(i,j) = RoomRadiatorPiping(...
                        radiatorConvArea=pi*radiatorPipeHydrDia*radiatorPipeLen(i,j),...
                        radiatorConvHTC=intToRoomHTC, ...
                        gateValveOrificeDia=radiatorPipeHydrDia,...
                        maxGateValveOrificeDia=radiatorPipeHydrDia, ...
                        radiatorPipeHydrDia=radiatorPipeHydrDia,...
                        radiatorPipeT=iniTemperature, ...
                        radiatorPipeArea=radiatorPipeArea,...
                        radiatorPipeLen=radiatorPipeLen(i,j), ...
                        radiatorPipeRoughness=heatTransferPipeRoughness,...
                        gateValveBypassOrificeDia=radiatorPipeHydrDia,...
                        maxGateValveBypassOrificeDia=radiatorPipeHydrDia, ...
                        radiatorBypassPipeHydrDia=radiatorPipeHydrDia,...
                        radiatorBypassPipeT=iniTemperature, ...
                        radiatorBypassPipeArea=radiatorPipeArea,...
                        radiatorBypassPipeLen=radiatorPipeLen(i,j), ...
                        radiatorBypassPipeRoughness=heatTransferPipeRoughness);
                end
                equations
                    roomTemp(i,j) == Room(i,j).T;
                    RoomRadiator(i,j).TL_V == V(i,j);
                end
                connections
                    connect(RoomRadiator(i,j).TL_A,A(i,j));
                    connect(RoomRadiator(i,j).TL_B,B(i,j));
                    connect(RoomRadiator(i,j).M,Room(i,j).M);
                    connect(S(i,j),AddHeat(i,j).S);
                    connect(AddHeat(i,j).B,Room(i,j).M);
                    connect(AddHeat(i,j).A,Tref(i,j).H);
                end
            end
        end
        annotations
            [roomUFPipingArea,heatTransferPipeRoughness,...
                UFPipeHydrDia,UFPipeGap,UFPipeArea]: ExternalAccess=none;
        end
    else % roomModelOption == roomPhysicsOptions.roomUF
        for i = 1:nApts
            for j = 1:nRooms
                components(ExternalAccess=observe)
                    Tref(i,j) = foundation.thermal.elements.reference;
                    AddHeat(i,j) = foundation.thermal.sources.controlled_heat_flow;
                end
                components(ExternalAccess=observe,CompileReuse=true)
                    RoomUF(i,j) = RoomUnderFloorPiping(...
                        UFPipeHTArea =pi*UFPipeHydrDia*UFPipeLen(i,j), ...
                        UFPipeHTC=intToRoomHTC,...
                        gateValveOrificeDia=UFPipeHydrDia, ...
                        gateValveBypassOrificeDia=UFPipeHydrDia, ...
                        maxGateValveOrificeDia=UFPipeHydrDia,...
                        maxGateValveBypassOrificeDia=UFPipeHydrDia,...
                        UFPipeHydrDia=UFPipeHydrDia, ...
                        UFBypassPipeHydrDia=UFPipeHydrDia, ...
                        UFPipeT=iniTemperature,...
                        UFBypassPipeT=iniTemperature,...
                        UFPipeArea=UFPipeArea, ...
                        UFBypassPipeArea=UFPipeArea, ...
                        UFPipeLen=UFPipeLen(i,j),...
                        UFBypassPipeLen=UFPipeLen(i,j),...
                        UFPipeRoughness=heatTransferPipeRoughness, ...
                        UFBypassPipeRoughness=heatTransferPipeRoughness);
                end
                equations
                    roomTemp(i,j) == Room(i,j).T;
                    RoomUF(i,j).TL_V == V(i,j);
                end
                connections
                    connect(RoomUF(i,j).TL_A,A(i,j));
                    connect(RoomUF(i,j).TL_B,B(i,j));
                    connect(RoomUF(i,j).M,Room(i,j).M);
                    connect(S(i,j),AddHeat(i,j).S);
                    connect(AddHeat(i,j).B,Room(i,j).M);
                    connect(AddHeat(i,j).A,Tref(i,j).H);
                end
            end
        end
        annotations
            [roomRadiatorArea,radiatorPipeGap,radiatorPipeHydrDia,...
                radiatorPipeArea,heatTransferPipeRoughness]: ExternalAccess=none;
        end
    end

    % Define room inter-connections
    for i = 1:numOfRoomConn
        components(ExternalAccess=observe)
            % Create wall component
            intWallModel(i) = Wall(wallArea = intWallAreaVec(i,1), extToWallHTC = extToWallHTC, ...
                wallMaterialMass = wallMaterialDen*intWallAreaVec(i,1)*wallThickness, ...
                wallMaterialCp = wallMaterialCp, intToRoomHTC = intToRoomHTC, ...
                wallThermalK = wallThermalK, wallThickness = wallThickness, ...
                wallTemperature = {value = iniTemperature, priority = priority.high});
        end
        connections
            % Connect both rooms to either side of the wall
            connect(intWallModel(i).EXT,Room(roomConnMat(i,1),roomConnMat(i,2)).M);
            connect(intWallModel(i).INT,Room(roomConnMat(i,3),roomConnMat(i,4)).M);
        end
    end

    % Define building rooms to external env. connections
    for i = 1:numOfRoomExtConn
        components(ExternalAccess=observe,CompileReuse=true)
            % Create external wall component
            % CompileReuse=true provides benefit only with WallSolarWithWindowsAndVents() fidelity of wall model
            % Before using it for any custom wall model, ensure that you get the compilation time benefit.
            extWallToEnv(i) = WallSolarWithWindowsAndVents(wallArea = max(minArea,solidWallArea(i,1)), ...
                extToWallHTC = extToWallHTC, winArea = max(minArea,glassWindowArea(i,1)), ...
                wallMaterialMass = wallMaterialDen*max(minArea,solidWallArea(i,1))*wallThickness, ...
                wallMaterialCp = wallMaterialCp, ...
                ventArea = max(minArea,openVentArea(i,1)), wallAbsorptivity = wallAbsorptivity, ...
                intToRoomHTC = intToRoomHTC, wallThermalK = wallThermalK, wallThickness = wallThickness, ...
                winMaterialMass = winMaterialDen*max(minArea,glassWindowArea(i,1))*winThickness, ...
                winMaterialCp = winMaterialCp, winAbsorptivity = winAbsorptivity, ...
                winThermalK = winThermalK, winThickness = winThickness, winTransmissivity = winTransmissivity, ...
                wallTemperature = {value = iniTemperature, priority = priority.high}, ...
                winTemperature = {value = iniTemperature, priority = priority.high});
        end
        connections
            % Connect wall to the ambient
            connect(extWallToEnv(i).EXT,H);
            % Connect wall to the room
            connect(extWallToEnv(i).INT,Room(roomEnvConnMat(i,1),roomEnvConnMat(i,2)).M);
        end
        equations
            % Sun radiation on external walls and windows
            extWallToEnv(i).SUN == max({0,'1'},min({1,'1'},({1,'1'}-C)))*...
                {roomEnvSolarRad(i,min(maxHours,max(1,ceil(value(time,'s')/3600)))), 'W/m^2'};
            wallTemp(1,i) == extWallToEnv(i).wallTemperature;
        end
    end

    % Define roof heat transfer
    for i = 1:numOfRoomWithRoof
        components(ExternalAccess=observe)
            % Create external wall component
            roofToEnv(i) = WallSolar(wallArea = max(minArea,roofArea(i,1)), extToWallHTC = extToWallHTC, ...
                wallMaterialMass =  wallMaterialDen*max(minArea,roofArea(i,1))*wallThickness, ...
                wallMaterialCp = wallMaterialCp, wallAbsorptivity = wallAbsorptivity, ...
                intToRoomHTC = intToRoomHTC, wallThermalK = wallThermalK, ...
                wallThickness = wallThickness, ...
                wallTemperature = {value = iniTemperature, priority = priority.high});
        end
        connections
            % Connect wall to the ambient
            connect(roofToEnv(i).EXT,H);
            % Connect wall to the room
            connect(roofToEnv(i).INT,Room(roofEnvConnMat(i,1),roofEnvConnMat(i,2)).M);
        end
        equations
            % Sun radiation on external walls and windows
            roofToEnv(i).SUN == max({0,'1'},min({1,'1'},({1,'1'}-C)))*...
                {roofEnvSolarRad(i,min(maxHours,max(1,ceil(value(time,'s')/3600)))), 'W/m^2'};
        end
    end

    % Define heat loss to ground
    for i = 1:numOfRoomGroundFlr
        components(ExternalAccess=observe)
            % Create wall component
            floorModel(i) = Wall(wallArea = max(minArea,floorArea(i,1)), extToWallHTC = extToWallHTC, ...
                wallMaterialMass = wallMaterialDen*max(minArea,floorArea(i,1))*wallThickness, ...
                wallMaterialCp = wallMaterialCp, intToRoomHTC = intToRoomHTC, ...
                wallThermalK = wallThermalK, wallThickness = wallThickness, ...
                wallTemperature = {value = iniTemperature, priority = priority.high});
        end
        % Create connections for ground floor rooms and ground thermal resistance
        connections
            connect(floorModel(i).INT,Room(floorGroundConn(i,1),floorGroundConn(i,2)).M);
            connect(floorModel(i).EXT,G);
        end
    end

    % Error Checks
    equations
        assert(size(roofEnvConnMat,1)==size(roofEnvSolarRad,1));
        assert(size(roomEnvConnMat,1)==size(roomEnvSolarRad,1));
        assert(size(roofEnvSolarRad,2)==size(roomEnvSolarRad,2));
        assert(size(roomVolMat,1)==nApts);
        assert(size(roomVolMat,2)==nRooms);
    end
end

function bldg = createSimpleHouseWithInclinedRoof(NameValueArgs)
% Function to create a simple house with inclined roof.

% Copyright 2025 The MathWorks, Inc.
    
    arguments
        NameValueArgs.InclinationSide string {mustBeMember(NameValueArgs.InclinationSide,["Longer","Shorter"])} = "Longer"
        NameValueArgs.RoofTopFractionalDistance {mustBeInRange(NameValueArgs.RoofTopFractionalDistance,0.01,0.99)} = 0.5
        NameValueArgs.RoofHeight (1,1) simscape.Value
        NameValueArgs.Tol {mustBeNonempty} = 0.01
        NameValueArgs.Plot {mustBeNonempty} = false
        NameValueArgs.PlotViewDirection (1,3) {mustBeNonempty} = [-1 -1 1]
    end

    oneAptUnit  = []; 
    oneAptUnit   = addRoomToFloorPlan(FloorPlan=oneAptUnit,...
                                      NewRoom="part1",...
                                      Vertex=simscape.Value([0,0],"ft"),...
                                      Length=simscape.Value(12.5,"ft"),...
                                      Width=simscape.Value(12,"ft"),...
                                      Angle=simscape.Value(0,"deg"));
    oneAptUnit   = addRoomToFloorPlan(FloorPlan=oneAptUnit,...
                                      NewRoom="part2",...
                                      Vertex=simscape.Value([12,0],"ft"),...
                                      Length=simscape.Value(12.5,"ft"),...
                                      Width=simscape.Value(12,"ft"),...
                                      Angle=simscape.Value(0,"deg"));
    oneAptUnit   = addRoomToFloorPlan(FloorPlan=oneAptUnit,...
                                      NewRoom="part3",...
                                      Vertex=simscape.Value([24,0],"ft"),...
                                      Length=simscape.Value(12.5,"ft"),...
                                      Width=simscape.Value(12,"ft"),...
                                      Angle=simscape.Value(0,"deg"));
    oneAptUnit   = addRoomToFloorPlan(FloorPlan=oneAptUnit,...
                                      NewRoom="part4",...
                                      Vertex=simscape.Value([0,12.5],"ft"),...
                                      Length=simscape.Value(12.5,"ft"),...
                                      Width=simscape.Value(12,"ft"),...
                                      Angle=simscape.Value(0,"deg"));
    oneAptUnit   = addRoomToFloorPlan(FloorPlan=oneAptUnit,...
                                      NewRoom="part5",...
                                      Vertex=simscape.Value([12,12.5],"ft"),...
                                      Length=simscape.Value(12.5,"ft"),...
                                      Width=simscape.Value(12,"ft"),...
                                      Angle=simscape.Value(0,"deg"));
    oneAptUnit   = addRoomToFloorPlan(FloorPlan=oneAptUnit,...
                                      NewRoom="part6",...
                                      Vertex=simscape.Value([24,12.5],"ft"),...
                                      Length=simscape.Value(12.5,"ft"),...
                                      Width=simscape.Value(12,"ft"),...
                                      Angle=simscape.Value(0,"deg"));
    
    modelApt = defineSingleApartmentUnit(Apartment=oneAptUnit,...
                                         Tol=NameValueArgs.Tol);

    apartment  = copyMoveRotateForNewApartment(Apartment=modelApt,...
                                               MoveDistance=simscape.Value([0,0],"ft"),...
                                               RotationAngle=simscape.Value(0.1,"deg"),...
                                               RotateAboutRoom="part1",...
                                               Tol=NameValueArgs.Tol);
    
    floorPlan = defineBuildingFloorPlan(Apartments={apartment});

    tblWinVentData = visualizeBuildingWallsToAddWindowsVents(FloorPlan=floorPlan,Plot=false);
    windowData = [1,2,0.50; ...
                  2,3,0.50; ...
                  3,4,0.50;...
                  4,1,0.50];
    disp("Adding windows on all 4 sides of the building");
    for i = 1:size(windowData,1)
        id = find(and(tblWinVentData.("From Point")==windowData(i,1),...
                      tblWinVentData.("To Point")==windowData(i,2)));
        for j = 1:size(id,1)
            tblWinVentData.("Window (0-1)")(id(j,1),1) = windowData(i,3);
        end
    end

    disp(" "); disp("*** Updated window and vent data"); disp(" "); 
    figure("Name","Updated Window and Vent Data");
    disp(tblWinVentData);
    
    updatedFloorPlan = addOpeningOnWallSection(FloorPlan=floorPlan,...
                                           Data=tblWinVentData);
   
    bldgFlatRoof = generateBuilding3Dlayout(BuildingName="BuildingUnit",...
                                            BuildingFloorPlan=updatedFloorPlan,...
                                            NumberOfLevels=2,...
                                            LevelHeight=simscape.Value(10.5,"ft"),...
                                            Tol=NameValueArgs.Tol);
    
    [building,~] = addInclinedRoofOnBuilding(Building=bldgFlatRoof,...
                                               InclinationSide=NameValueArgs.InclinationSide,...
                                               RoofHeight=NameValueArgs.RoofHeight,...
                                               RoofTopFractionalDistance=NameValueArgs.RoofTopFractionalDistance,...
                                               Tol=NameValueArgs.Tol);

    bldgTbl = getBuildingRoomConnectivity(Building=building);
    bldgTbl.("Solid Wall Fraction") = 0.01*ones(size(bldgTbl.("Solid Wall Fraction"),1),1);
    bldg = updateBuildingRoomConnectivity(Building=building,ConnectionTable=bldgTbl);
    
    if NameValueArgs.Plot 
        figure("Name","Building Unit Elevation Plot");
        plot3DlayoutBuilding(Building=bldg,PlotViewDirection=NameValueArgs.PlotViewDirection,ColorScheme="simple");
    end

    createIconBuildingCustomComponent(Building=bldg,PlotViewDirection=NameValueArgs.PlotViewDirection);
end